{"version":3,"sources":["firebaseSetting.js","components/AuthForm.js","routes/Auth.js","components/Chat.js","components/ChatForm.js","routes/Home.js","routes/Profile.js","components/Navigation.js","components/Router.js","components/App.js","index.js"],"names":["initializeApp","apiKey","process","authDomain","projectId","storageBucket","messagingSenderId","appId","authService","getAuth","createUser","createUserWithEmailAndPassword","signInEmail","signInWithEmailAndPassword","checkAuthState","onAuthStateChanged","githubLogin","GithubAuthProvider","googleLogin","GoogleAuthProvider","popUp","signInWithPopup","logOut","signOut","dbService","firestore","db","storageService","getStorage","delObject","deleteObject","reference","ref","updateUserProfile","updateProfile","signInWithRedirect","AuthForm","useState","email","setEmail","password","setPassword","newAccount","setNewAccount","error","setError","onChange","event","target","name","value","onSubmit","e","a","preventDefault","message","className","type","placeholder","required","onClick","prev","Auth","onSocialClick","provider","result","credentialFromResult","icon","faPoo","color","size","style","marginBottom","faGoogle","faGithub","Chat","chatObj","isOwner","editing","setEditing","text","newChat","setNewChat","deleteDoc","id","doc","deleteAttachment","attachmentUrl","toggleEditing","document","updateDoc","createdAt","Date","now","autoFocus","src","window","confirm","faTrash","faPencilAlt","ChatForm","userObj","chat","setChat","attachment","setAttachment","fileInput","useRef","attachmentRef","uid","uuidv4","uploadString","response","getDownloadURL","addDoc","collection","creatorId","current","max","htmlFor","faPlus","theFile","files","reader","FileReader","readAsDataURL","onloadend","finishedEvent","currentTarget","accept","opacity","backgroundImage","width","faTimes","Home","chats","setChats","useEffect","q","query","orderBy","onSnapshot","querySnapshot","chatsArray","docs","map","data","marginTop","Profile","refreshUser","displayName","newDisplayName","setNewDisplayName","getMyChats","where","getDocs","logoutFunction","Navigation","display","justifyContent","to","marginRight","faComment","marginLeft","flexDirection","alignItems","fontSize","faUser","position","top","right","href","AppRouter","isLoggedIn","maxWidth","margin","exact","path","from","App","init","setInit","setUserObj","user","userName","split","args","currentUser","Boolean","getFullYear","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.87543459.chunk.js","sourcesContent":["import { initializeApp } from \"firebase/app\";\nimport { getStorage, deleteObject, ref } from \"firebase/storage\";\nimport { getAuth, createUserWithEmailAndPassword, signInWithEmailAndPassword, onAuthStateChanged, GithubAuthProvider, GoogleAuthProvider, signInWithPopup, signOut, updateProfile, signInWithRedirect } from \"firebase/auth\";\nimport * as firestore from \"firebase/firestore\";\n\nconst firebaseConfig = {\n    apiKey: process.env.REACT_APP_API_KEY,\n    authDomain: process.env.REACT_APP_AUTH_DOMAIN,\n    projectId: process.env.REACT_APP_PROJECT_ID,\n    storageBucket: process.env.REACT_APP_STORAGE_BUCKET,\n    messagingSenderId: process.env.REACT_APP_MESSAGEIN_ID,\n    appId: process.env.REACT_APP_APP_ID,\n};\n\ninitializeApp(firebaseConfig);\nexport const authService = getAuth();\nexport const createUser = createUserWithEmailAndPassword;\nexport const signInEmail = signInWithEmailAndPassword;\nexport const checkAuthState = onAuthStateChanged;\nexport const githubLogin = GithubAuthProvider;\nexport const googleLogin = GoogleAuthProvider;\nexport const popUp = signInWithPopup;\nexport const logOut = signOut;\nexport const dbService = firestore;\nexport const db = firestore.getFirestore();\nexport const storageService = getStorage();\nexport const delObject = deleteObject;\nexport const reference = ref;\nexport const updateUserProfile = updateProfile;\nexport const signInRedirect = signInWithRedirect;","import { authService, createUser, signInEmail } from \"firebaseSetting\";\nimport React, { useState } from \"react\";\n\nconst AuthForm = () => {\n    const [email, setEmail] = useState(\"\");\n    // 초기값 \"\" 으로 useState 호출 -> [value(\"\"), setFunction] 으로 이루어진 배열을 반환\n    const [password, setPassword] = useState(\"\");\n    const [newAccount, setNewAccount] = useState(false);\n    const [error, setError] = useState(\"\");\n    const onChange = (event) => {\n        const { target: { name, value } } = event;\n        if (name === \"email\") {\n            setEmail(value);\n        } else if (name === \"password\") {\n            setPassword(value)\n        }\n    };\n    // => value를 intercept 해 setFunction 에 넣는다. => state value 값이 변하고 아래 input 의 value 가 state 값이기 때문에 입력이 가능해진다.왜 이렇게 ?\n    // => submit 하면 새로고침이 되고 react 또한 초기화되기 떄문. 그래서 onSubmit 도 막아준다.\n    const onSubmit = async (e) => {\n        e.preventDefault();\n        try {\n            let data;\n            if (newAccount) {\n                // 계정 생성\n                data = await createUser(authService, email, password);\n                await signInEmail(authService, email, password);\n            } else {\n                // 로그인\n                data = await signInEmail(authService, email, password);\n            }\n        } catch (error) {\n            setError(error.message);\n        }\n    };\n    const toggleAccount = () => setNewAccount((prev) => !prev);\n    // 이전 값에 반대되는 값을 반환(toggle) => setNewAccount 에 반대값이 입력 => newAccount 값 변경\n    return (\n        <>\n            <form onSubmit={onSubmit} className=\"container\">\n                <input onChange={onChange} name=\"email\" type=\"email\" placeholder=\"이메일\" required value={email} className=\"authInput\" />\n                <input onChange={onChange} name=\"password\" type=\"password\" placeholder=\"비밀번호\" required value={password} className=\"authInput\" />\n                <input type=\"submit\" value={newAccount ? \"계정 생성\" : \"로그인\"} className=\"authInput authSubmit\" />\n                {error && <span className=\"authError\">{error}</span>}\n            </form>\n            <span onClick={toggleAccount} className=\"authSwitch\">{newAccount ? \"로그인\" : \"계정 생성\"}</span>\n        </>\n    )\n};\n\nexport default AuthForm;","import { authService, googleLogin, githubLogin, popUp } from \"firebaseSetting\";\nimport React from \"react\";\nimport AuthForm from \"../components/AuthForm\";\n\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport {\n    faTwitter,\n    faGoogle,\n    faGithub,\n} from \"@fortawesome/free-brands-svg-icons\";\nimport { faComment, faPizzaSlice, faPoo, faPoop, faTimes } from \"@fortawesome/free-solid-svg-icons\";\n\nconst Auth = () => {\n    const onSocialClick = async (event) => {\n        const { target: { name } } = event;\n        let provider;\n        if (name === \"google\") {\n            provider = new googleLogin();\n            const result = await popUp(authService, provider);\n            const credential = githubLogin.credentialFromResult(result);\n        } else if (name === \"github\") {\n            provider = new githubLogin()\n            const result = await popUp(authService, provider);\n            const credential = githubLogin.credentialFromResult(result);\n        };\n    };\n    return (\n        <div className=\"authContainer\">\n            <FontAwesomeIcon\n                icon={faPoo}\n                color={\"#846d00\"}\n                size=\"5x\"\n                style={{ marginBottom: 60 }}\n            />\n            <AuthForm />\n            <div className=\"authBtns\">\n                <button className=\"authBtn\" onClick={onSocialClick} name=\"google\">Google 로 계속하기 <span className=\"socialIcon\"> <FontAwesomeIcon icon={faGoogle} color={\"orange\"} /></span></button>\n                <button className=\"authBtn\" onClick={onSocialClick} name=\"github\">Github 로 계속하기 <span className=\"socialIcon\"> <FontAwesomeIcon icon={faGithub} /></span></button>\n            </div>\n        </div>\n    )\n}\n\nexport default Auth;","import { db, dbService, delObject, reference, storageService } from \"firebaseSetting\";\nimport React from \"react\";\nimport { useState } from \"react/cjs/react.development\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faTrash, faPencilAlt } from \"@fortawesome/free-solid-svg-icons\";\n\nconst Chat = ({ chatObj, isOwner }) => {\n    const [editing, setEditing] = useState(false);\n    const [newChat, setNewChat] = useState(chatObj.text);\n\n    const deleteDoc = async (id) => {\n        await dbService.deleteDoc(dbService.doc(db, \"chats\", id));\n    }\n    const deleteAttachment = async (chatObj) => {\n        await delObject(reference(storageService, chatObj.attachmentUrl))\n    };\n    const onDeleteClick = () => {\n        const ok = window.confirm(\"삭제할까용?\");\n        if (ok) {\n            deleteDoc(chatObj.id);\n            if (chatObj.attachmentUrl) deleteAttachment(chatObj);\n        } else {\n            //\n        };\n    };\n\n    const toggleEditing = () => setEditing((prev) => !prev);\n    // 이전 value 와 반대 value 로 토글.\n    const onSubmit = async (event) => {\n        event.preventDefault();\n        const document = dbService.doc(db, \"chats\", chatObj.id);\n        await dbService.updateDoc(document, {\n            text: newChat,\n            createdAt: Date.now(),\n        });\n        setEditing(false);\n    };\n\n    const onChange = (event) => {\n        const {\n            target: { value }\n        } = event;\n        setNewChat(value);\n    };\n\n    return (\n        <div className=\"chat\">\n            {editing ? (\n                <>\n                    {isOwner &&\n                        <>\n                            <form onSubmit={onSubmit} className=\"container chatEdit\">\n                                <input type=\"text\" placeholder=\"수정중\" value={newChat} onChange={onChange} required autoFocus className=\"formInput chat__input\" />\n                                <input type=\"submit\" value=\"수정하기\" className=\"formBtn\" />\n                            </form>\n                            <button onClick={toggleEditing} className=\"formBtn cancelBtn\">취소</button>\n                        </>\n                    }\n                </>\n            )\n                : (\n                    <>\n                        <h4>{chatObj.text}</h4>\n                        {chatObj.attachmentUrl && <img src={chatObj.attachmentUrl} />}\n                        {\n                            isOwner && (\n                                <div className=\"chat__actions\">\n                                    <span onClick={onDeleteClick}><FontAwesomeIcon icon={faTrash} /></span>\n                                    <span onClick={toggleEditing}> <FontAwesomeIcon icon={faPencilAlt} /></span>\n                                </div>\n                            )\n                        }\n                    </>\n                )\n            }\n        </div >\n    );\n    // && 은 react 조건부 렌더링. 삼항연산자와 달리 else 실행식이 없다.\n}\n\nexport default Chat;","import { React, useState } from 'react';\nimport { v4 as uuidv4 } from \"uuid\"; // 사진 주소 랜덤 아이디 생성\nimport { useRef } from \"react/cjs/react.development\";\nimport { ref, uploadString, getDownloadURL } from \"firebase/storage\";\nimport { storageService, dbService, db } from \"firebaseSetting\";\n\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faPlus, faTimes } from \"@fortawesome/free-solid-svg-icons\";\n\nconst ChatForm = ({ userObj }) => {\n\n    const [chat, setChat] = useState(\"\");\n    const [error, setError] = useState(\"\");\n    const [attachment, setAttachment] = useState(\"\");\n    const fileInput = useRef(); // 취소 눌렀을 때 input 내 value 지우기 위해 선언.\n\n    const onSubmit = async (event) => {\n        event.preventDefault();\n        let attachmentUrl = \"\";\n        if (attachment) {\n            const attachmentRef = ref(storageService, `${userObj.uid}/${uuidv4()}`);\n            const response = await uploadString(attachmentRef, attachment, \"data_url\");\n            // reference 만들고 주소 지정 후 파일을 담아 보냄.. \n            // attachment 엔 fileChange 에서 setAttachment 로 파일이 들어가있음.\n            attachmentUrl = await getDownloadURL(response.ref); // 사진 경로 얻어옴.\n        }\n        try {\n            const doc = await dbService.addDoc(dbService.collection(db, \"chats\"), {\n                text: chat,\n                createdAt: Date.now(),\n                creatorId: userObj.uid,\n                attachmentUrl\n            });\n            setChat(\"\");\n            setAttachment(\"\");\n            fileInput.current.value = null;\n        } catch (e) {\n            setError(e.message);\n        }\n    };\n    const onChange = (event) => {\n        const { target: { value } } = event;\n        setChat(value);\n    };\n    const onFileChange = (event) => {\n        const { target: { files } } = event;\n        const theFile = files[0];\n        const reader = new FileReader();\n        reader.readAsDataURL(theFile);\n        // reader 가 뭘 읽을건지 설정.\n        reader.onloadend = (finishedEvent) => {\n            // reader 에 file load 가 완료되면 실행 ( eventListener 개념 )\n            const {\n                currentTarget: { result },\n            } = finishedEvent;\n            setAttachment(result);\n        };\n\n    };\n\n    const onClearAttachmentClick = () => {\n        setAttachment(\"\");\n        fileInput.current.value = null;\n    };\n    return (\n        <form onSubmit={onSubmit} className=\"factoryForm\">\n            {error}\n            <div className=\"factoryInput__container\">\n                <input value={chat} onChange={onChange} type=\"text\" placeholder=\"임금님 귀는 당나귀 귀\" max={120} className=\"factoryInput__input\" />\n                <input type=\"submit\" value=\"&rarr;\" className=\"factoryInput__arrow\" />\n            </div>\n            <label htmlFor=\"attach-file\" className=\"factoryInput__label\">\n                <span className=\"addAttach\">사진 추가하기</span>\n                <FontAwesomeIcon icon={faPlus} color={\"white\"} />\n            </label>\n            <input id=\"attach-file\" type=\"file\" onChange={onFileChange} accept=\"image/*\" ref={fileInput} style={{ opacity: 0, }} />\n            {attachment && (\n                <div className=\"factoryForm__attachment\">\n                    <img style={{ backgroundImage: attachment }} src={attachment} width=\"100px\" />\n                    <div className=\"factoryForm__clear\" onClick={onClearAttachmentClick}>\n                        <span className=\"addAttach\">취소</span>\n                        <FontAwesomeIcon icon={faTimes} color={\"white\"} />\n                    </div>\n                </div>\n            )}\n        </form>\n    )\n};\n\nexport default ChatForm;","import React, { useEffect, useState } from \"react\";\nimport { dbService, db } from \"firebaseSetting\";\nimport Chat from \"../components/Chat.js\";\nimport ChatForm from \"components/ChatForm.js\";\n\nconst Home = ({ userObj }) => {\n\n    const [chats, setChats] = useState([]);\n    // const getChats = async () => {\n    //     const DBchats = await dbService.getDocs(dbService.collection(db, \"chats\"));\n    //     DBchats.forEach((document) => {\n    //         const chatObject = {\n    //             ...document.data(),\n    //             id: document.id,\n    //         };\n    //         // 여기서 ... 은 object 인 document.data() 를 unpack 하는것\n    //         setChats(prev => [chatObject, ...prev])\n    //         // 기존 값에 chatObject 를 추가\n    //     })\n    // };\n    useEffect(() => {\n        // getChats();\n        const q = dbService.query(dbService.collection(db, \"chats\"), dbService.orderBy(\"createdAt\", \"desc\"));\n        const unsubscribe = dbService.onSnapshot(q, (querySnapshot) => {\n            const chatsArray = querySnapshot.docs.map(doc => ({ id: doc.id, ...doc.data() }))\n            setChats(chatsArray);\n        })\n        // snapshot => q 에서 지정한 조건이 실시간으로 변할 때 실행. \n    }, []);\n    // 마운트 완료되면 실행, 두 번째 인자는 어떤 state 가 변경될 떄 실행될건지 특정.,\n    // 비워두는 이유는 함수를 처음 마운트 되었을 때 한번만 실행하고 싶기 떄문. (onSnapshot 은 listener 개념)\n\n    return (\n        <div className=\"container\">\n            <ChatForm userObj={userObj} />\n            <div style={{ marginTop: 30 }}>\n                {chats.map((chat) => (\n                    <Chat key={chat.id} chatObj={chat} isOwner={chat.creatorId === userObj.uid} />\n                )\n                )}\n            </div>\n        </div>\n    )\n};\nexport default Home;\n","import { db, dbService, authService, updateUserProfile } from \"firebaseSetting\";\nimport React, { useEffect } from \"react\";\nimport { useState } from \"react\";\nimport Chat from \"components/Chat\";\n\nconst Profile = ({ refreshUser, userObj }) => {\n    const [chats, setChats] = useState([]);\n    const [newDisplayName, setNewDisplayName] = useState(userObj.displayName);\n\n    const getMyChats = async () => {\n        const q = dbService.query(dbService.collection(db, \"chats\"), dbService.where(\"creatorId\", \"==\", userObj.uid), dbService.orderBy(\"createdAt\"));\n        const docs = await dbService.getDocs(q);\n        const chats = docs.docs.map(doc => ({ id: doc.id, ...doc.data() }));\n        setChats(chats);\n    };\n    useEffect(() => {\n        getMyChats();\n    });\n    const onChange = (event) => {\n        const {\n            target: { value }\n        } = event;\n        setNewDisplayName(value);\n    };\n    const onSubmit = async (event) => {\n        event.preventDefault();\n        if (userObj.displayName !== newDisplayName && newDisplayName) {\n            // await updateUserProfile(authService.currentUser, { displayName: newDisplayName });\n            await userObj.updateProfile({\n                displayName: newDisplayName,\n            })\n        };\n        refreshUser();\n        setNewDisplayName(\"\");\n    };\n    return (\n        <div className=\"container\">\n            <form onSubmit={onSubmit} className=\"profileForm\">\n                <input type=\"text\" placeholder={newDisplayName} onChange={onChange} value={newDisplayName} autoFocus className=\"formInput\" />\n                <input type=\"submit\" value=\"이름 변경\" className=\"formBtn profileFormBtn\" style={{ marginTop: 10 }} />\n            </form>\n            <div>\n                {chats.map((chat) => (\n                    <Chat key={chat.id} chatObj={chat} isOwner={chat.creatorId === userObj.uid} />\n                )\n                )}\n            </div>\n        </div>\n    )\n};\n\nexport default Profile;","import { logOut, authService } from \"firebaseSetting\";\nimport React from \"react\";\nimport { Link } from \"react-router-dom\";\n\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faTwitter } from \"@fortawesome/free-brands-svg-icons\";\nimport { faComment, faTimes, faUser } from \"@fortawesome/free-solid-svg-icons\";\n\nconst logoutFunction = () => logOut(authService);\nconst Navigation = ({ userObj }) => <nav>\n    <ul style={{ display: \"flex\", justifyContent: \"center\", marginTop: 50 }}>\n        <li>\n            <Link to=\"/\" style={{ marginRight: 10 }}>\n                <FontAwesomeIcon icon={faComment} color={\"#634e13\"} size=\"2x\" />\n            </Link>\n        </li>\n        <li>\n            <Link\n                to=\"/profile\"\n                style={{\n                    marginLeft: 10,\n                    display: \"flex\",\n                    flexDirection: \"column\",\n                    alignItems: \"center\",\n                    fontSize: 12,\n                }}>\n                <FontAwesomeIcon icon={faUser} color={\"#634e13\"} size=\"2x\" />\n                {/* <span style={{ marginTop: 10 }}>\n                    {userObj.displayName\n                    ? `${userObj.displayName}의 프로필`\n                    : \"Profile\"}\n                </span> */}\n            </Link>\n        </li>\n        <li>\n            <a style={{\n                marginLeft: 20,\n                fontSize: 18,\n                position: \"absolute\",\n                top: \"30px\",\n                right: \"30px\",\n            }}\n                href=\"#\" onClick={logoutFunction}>\n                <FontAwesomeIcon icon={faTimes} color={\"#422903\"} size=\"2x\" />\n            </a>\n        </li>\n    </ul>\n</nav>;\n\nexport default Navigation;","import React from \"react\";\nimport { HashRouter as Router, Route, Switch, Redirect } from \"react-router-dom\";\nimport Auth from \"routes/Auth\";\nimport Home from \"routes/Home\";\nimport Profile from \"routes/Profile\";\nimport Navigation from \"components/Navigation\";\n\nconst AppRouter = ({ refreshUser, isLoggedIn, userObj }) => {\n    // && => Navigation 이 존재하려면 isLoggedIn == true 여야함\n    return (\n        <Router>\n            {isLoggedIn && <Navigation userObj={userObj} />}\n            <Switch>\n                <>\n                    {isLoggedIn\n                        ?\n                        <div\n                            style={{\n                                maxWidth: 890,\n                                width: \"100%\",\n                                margin: \"0 auto\",\n                                marginTop: 80,\n                                display: \"flex\",\n                                justifyContent: \"center\",\n                            }}\n                        >\n                            <Route exact path=\"/\">\n                                <Home userObj={userObj} />\n                            </Route>\n                            <Route exact path=\"/profile\">\n                                <Profile userObj={userObj} refreshUser={refreshUser} />\n                            </Route>\n                        </div>\n                        :\n                        <Route exact path=\"/\"><Auth></Auth></Route>}\n                    <Redirect from=\"*\" to=\"/\" />\n                    {/* Auth 로 빠졌을 때 다른 경로에 있다면 \"/\" 로 redirect */}\n                </>\n            </Switch>\n        </Router>\n    )\n\n}\n\nexport default AppRouter;","import React, { useEffect, useState } from \"react\";\nimport AppRouter from \"components/Router\";\nimport { authService, checkAuthState, updateUserProfile } from \"firebaseSetting\";\n\nfunction App() {\n  const [init, setInit] = useState(false);\n  // const [isLoggedIn, setIsLoggedIn] = useState(false);\n  // const [isLoggedIn, setIsLoggedIn] = useState(authService.currentUser);\n  // firebase의 currentUser 값을 state value 로 setState => 로그인 여부 파악가능.\n  // useState => 배열 반환. 첫번째 원소 value, 두번째는 상태를 업데이트하는 함수.\n  // 근데 이렇게 했을 때 문제점 -> 웹 로딩 되자마자 실행돼서 fb 가 currentUser 가져오기 전에 실행됨. 그래서 아래방법 이용.\n  const [userObj, setUserObj] = useState(null);\n  useEffect(() => {\n    checkAuthState(authService, async (user) => {\n      // checkAuthState => auth state 가 변할 때마다 실행되는 firebase 의 listener\n      // componentDidMount 와 유사. mount 될 때 실행된다.\n      if (user) {\n        if (!user.displayName) {\n          const userName = user.email.split(\"@\")[0];\n          await updateUserProfile(user, {\n            displayName: userName,\n          })\n        }\n        // setIsLoggedIn(true);\n        setUserObj({\n          displayName: user.displayName,\n          uid: user.uid,\n          updateProfile: (args) => updateUserProfile(user, args), //updateUserProfile 메서드를 오브젝트에 담아 다루기.\n        });\n        // 그냥 user 를 줄 수 있지만 react 는 거대한 object 가 변경되었을 때 변화를 판단해 재 render 하는 것에 약함. => shallow comparison 을 함.\n        // 필요한 요소만 담아 object 를 축소.\n      }\n      else { // login 후 logout 했을 경우\n        setUserObj(null);\n      }\n      setInit(true);\n    });\n  }, []);\n  const refreshUser = () => { // react 내 업데이트를 위한 userObj 업데이트 메서드\n    const user = authService.currentUser;\n    setUserObj(\n      {\n        displayName: user.displayName,\n        uid: user.uid,\n        updateProfile: (args) => updateUserProfile(user, args),\n      }\n    )\n  };\n  return <>\n    {init ? < AppRouter refreshUser={refreshUser} isLoggedIn={Boolean(userObj)} userObj={userObj} /> : \"로딩중...\"}\n    <footer className=\"footer\">&copy; H A N U M {new Date().getFullYear()}</footer>\n  </>;\n\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from 'components/App';\nimport \"firebaseSetting\";\nimport \"styles.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}